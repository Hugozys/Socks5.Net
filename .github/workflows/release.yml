name: Release

on: 
  push:
    tags:
    - 'v*'
jobs:
  nuget:
    name: publish nuget to nuget.org
    runs-on: ubuntu-latest
    outputs:
       version: ${{ steps.toolversion.outputs.version }}
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    - name: Get tool version
      run: |
        version=` grep '<Version>' < tools/Client/Client.csproj | sed 's/.*<Version>\(.*\)<\/Version>/\1/'`
        echo "VERSION=$(echo -n ${version})" >> $GITHUB_ENV
        echo "::set-output name=version::${version}"
      id: toolversion

    - name: Build
      run: dotnet build -c release

    - name: Run unit tests
      run: |
        dotnet test tests/Socks5.Net.UnitTests --no-restore -c release --collect:"XPlat Code Coverage" --settings ./tests/coverlet.runsettings --results-directory ./results
        dotnet test tests/Socks5.Net.Extensions.UnitTests --no-restore -c release --collect:"XPlat Code Coverage" --settings ./tests/coverlet.runsettings --results-directory ./results
    
    - name: Run integration tests
      run: |
        dotnet test tests/Socks5.Net.IntegrationTests --no-restore -c release --collect:"XPlat Code Coverage" --settings ./tests/coverlet.runsettings --results-directory ./results

    - name: Push nuget package
      run: |
        dotnet nuget push "package/*.nupkg" -k ${API_KEY} -s https://api.nuget.org/v3/index.json
      env:
        API_KEY: ${{secrets.NUGET_API_KEY}}


  binary:
    name: release executable
    needs: nuget
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    - name: Build
      run: dotnet build -c release

    - name: Run unit tests
      run: |
        dotnet test tests/Socks5.Net.UnitTests --no-restore -c release --collect:"XPlat Code Coverage" --settings ./tests/coverlet.runsettings --results-directory ./results
        dotnet test tests/Socks5.Net.Extensions.UnitTests --no-restore -c release --collect:"XPlat Code Coverage" --settings ./tests/coverlet.runsettings --results-directory ./results
    
    - name: Run integration tests
      run: |
        dotnet test tests/Socks5.Net.IntegrationTests --no-restore -c release --collect:"XPlat Code Coverage" --settings ./tests/coverlet.runsettings --results-directory ./results

    - name: Publish self-contained binaries on linux
      run: |
        dotnet publish -c release tools/Client/Client.csproj -r linux-x64 --self-contained true -o ./bin -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true
        dotnet publish -c release tools/SocksServer/SocksServer.csproj -r linux-x64 --self-contained true -o ./bin -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true
        ./bin/Client -h
        ./bin/SocksServer -h
        mv ./bin/Client ./bin/sclient_linux-x64_${{ needs.nuget.outputs.version }}
        mv ./bin/SocksServer ./bin/sserver_linux-x64_${VERSION}
      if: matrix.os == 'ubuntu-latest'

    - name: Publish self-contained binaries on windows
      run: |
        dotnet publish -c release tools/Client/Client.csproj -r win-x64 --self-contained true -o ./bin -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true
        dotnet publish -c release tools/SocksServer/SocksServer.csproj -r win-x64 --self-contained true -o ./bin -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true
        ./bin/Client.exe -h
        ./bin/SocksServer.exe -h
        mv ./bin/Client.exe ./bin/sclient_win-x64_${{ needs.nuget.outputs.version }}.exe
        mv ./bin/SocksServer.exe ./bin/sserver_win-x64_${{ needs.nuget.outputs.version }}.exe
      if: matrix.os == 'windows-latest'
        
    - name: Upload release assets for Linux
      uses: svenstaro/upload-release-action@v2
      if: matrix.os == 'ubuntu-latest'
      with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./bin/*linux-x64*
          tag: ${{ github.ref }}
          file_glob: true
          prerelease: true

    - name: Upload release assets for Windows
      if: matrix.os == 'windows-latest'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./bin/*win-x64*
        tag: ${{ github.ref }}
        file_glob: true
        prerelease: true
