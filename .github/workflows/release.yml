name: Release

on: 
  push:
    tags:
    - 'v*'
jobs:
  build_release:
    name: release executable
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019, ubuntu-latest]
        include:
          - os: ubuntu-latest
            release_suffix: linux
          - os: windows-2019
            release_suffix: win
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Build Docker image on Linux
      if: matrix.os == 'ubuntu-latest'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./tests/Dockerfile
        tags: test:latest
        load: true  # This is important for running the image locally in the next step
    - name: Build Docker image on windows
      if: matrix.os == 'windows-2019'
      run: |
        docker build -t test:latest -f ./tests/Dockerfile .
    - name: Run tests
      run: |
        docker run --rm test:latest
  
    - name: Publish self-contained binaries on linux
      run: |
        dotnet publish -c release tools/Client/Client.csproj -r linux-x64 --self-contained true -o ./bin -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true
        dotnet publish -c release tools/SocksServer/SocksServer.csproj -r linux-x64 --self-contained true -o ./bin -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true
        ./bin/Client -h
        ./bin/SocksServer -h
        mv ./bin/Client ./bin/sclient_linux_x64_${{ github.ref_name }}
        mv ./bin/SocksServer ./bin/sserver_linux_x64_${{ github.ref_name }}
      if: matrix.os == 'ubuntu-latest'

    - name: Publish self-contained binaries on windows
      run: |
        dotnet publish -c release tools/Client/Client.csproj -r win-x64 --self-contained true -o ./bin -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true
        dotnet publish -c release tools/SocksServer/SocksServer.csproj -r win-x64 --self-contained true -o ./bin -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true
        ./bin/Client.exe -h
        ./bin/SocksServer.exe -h
        mv ./bin/Client.exe ./bin/sclient_win_x64_${{ github.ref_name }}.exe
        mv ./bin/SocksServer.exe ./bin/sserver_win_x64_${{ github.ref_name }}.exe
      if: matrix.os == 'windows-latest'

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ github.ref_name }}
        draft: true
        prerelease: true
        files: |
          ./bin/sclient_${{ matrix.release_suffix }}_x64_${{ github.ref_name }}*
          ./bin/sserver_${{ matrix.release_suffix }}_x64_${{ github.ref_name }}*

  nuget:
    name: publish nuget to nuget.org
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./tests/Dockerfile
        tags: test:latest
        load: true  # This is important for running the image locally in the next step

    - name: Run tests
      run: |
        docker run -v ./results:/app/results --rm test:latest

    - name: Push nuget package
      run: |
        dotnet build -c release
        dotnet nuget add source --username Hugozys --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/Hugozys/index.json"        
        dotnet nuget push "package/*.nupkg" -k ${{ secrets.GITHUB_TOKEN }} -s github --skip-duplicate
        dotnet nuget push "package/*.nupkg" -k ${API_KEY} -s https://api.nuget.org/v3/index.json --skip-duplicate
      env:
        API_KEY: ${{ secrets.NUGET_API_KEY }}
