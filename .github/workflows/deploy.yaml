name: Deploy socks server

on: 
  push:
    tags:
    - 'v*'

jobs:
  deploy:
    name: deploy socks proxy to cloud
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    
    - name: Get tag
      id: tag
      uses: devops-actions/action-get-tag@v1.0.2

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/sserver:${{ steps.tag.outputs.tag }} 

    - name: Setup doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Retrieve Droplet information
      # workflow treats non zero exit code as failure, but we want to continue execution here
      continue-on-error: true
      id: get_droplet
      run: |
        set +e
        droplet_info=$(doctl compute droplet get ${{ vars.DROPLET_ID }} --format ID,Name,PublicIPv4 --no-header)
        status=$?
        echo "status: $status"
        echo "status=$status" >> $GITHUB_OUTPUT
        if [[ "${status}" == "0" ]]; then
          droplet_ip=$(echo "$droplet_info" | awk '{ print $3 }')
          echo "::add-mask::$droplet_ip"
          echo "DROPLET_IP=$droplet_ip" >> "$GITHUB_ENV"
        fi
        set -e
    - name: Create Droplet
      if: steps.get_droplet.outputs.status != '0'
      run: |
        cat << EOF > user-data.sh
        #cloud-config
        runcmd:
          - curl -fsSL https://get.docker.com -o get-docker.sh
          - sh get-docker.sh
        EOF
        doctl compute droplet create ${{ vars.DROPLET_ID }} \
            --size s-1vcpu-1gb \
            --image ubuntu-20-04-x64 \
            --region sgp1 \
            --ssh-keys "${{ secrets.DROPLET_SSH_PUBLIC_KEY_FINGERPRINT }}" \
            --user-data-file user-data.sh \
            --tag-names proxy \
            --wait
        sleep 2m # wait for docker installation
        droplet_info=$(doctl compute droplet get ${{ vars.DROPLET_ID }} --format ID,Name,PublicIPv4 --no-header)
        droplet_ip=$(echo "$droplet_info" | awk '{ print $3 }')
        echo "::add-mask::$droplet_ip"
        echo "DROPLET_IP=$droplet_ip" >> "$GITHUB_ENV"
        
    - name: Start Socks server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.DROPLET_IP }}
        username: root
        key: "${{ secrets.DROPLET_SSH_PRIVATE_KEY }}"
        script: |
          docker stop sserver
          docker rm sserver
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/sserver:${{ steps.tag.outputs.tag }}
          docker run --network host --name sserver -d ${{ secrets.DOCKER_HUB_USERNAME }}/sserver:${{ steps.tag.outputs.tag }} -u ${{ env.DROPLET_IP }}
